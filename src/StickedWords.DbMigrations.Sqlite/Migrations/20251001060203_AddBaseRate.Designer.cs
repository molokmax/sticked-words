// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StickedWords.Infrastructure;

#nullable disable

namespace StickedWords.DbMigrations.Migrations.Sqlite
{
    [DbContext(typeof(StickedWordsDbContext))]
    [Migration("20251001060203_AddBaseRate")]
    partial class AddBaseRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("StickedWords.Domain.Models.FlashCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseRate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("RepeatAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("RepeatAtUnixTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FlashCards");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.Guess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FlashCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SessionStageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlashCardId");

                    b.HasIndex("SessionStageId");

                    b.ToTable("Guesses");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.LearningSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ExpiringAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LearningSessions");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.SessionFlashCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FlashCardId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LearningSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlashCardId");

                    b.HasIndex("LearningSessionId");

                    b.ToTable("SessionFlashCards");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.SessionStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrentFlashCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LearningSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentFlashCardId");

                    b.HasIndex("LearningSessionId");

                    b.ToTable("SessionStages");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.Guess", b =>
                {
                    b.HasOne("StickedWords.Domain.Models.FlashCard", "FlashCard")
                        .WithMany()
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StickedWords.Domain.Models.SessionStage", "SessionStage")
                        .WithMany("Guesses")
                        .HasForeignKey("SessionStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashCard");

                    b.Navigation("SessionStage");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.SessionFlashCard", b =>
                {
                    b.HasOne("StickedWords.Domain.Models.FlashCard", "FlashCard")
                        .WithMany()
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StickedWords.Domain.Models.LearningSession", "LearningSession")
                        .WithMany("FlashCards")
                        .HasForeignKey("LearningSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashCard");

                    b.Navigation("LearningSession");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.SessionStage", b =>
                {
                    b.HasOne("StickedWords.Domain.Models.SessionFlashCard", "CurrentFlashCard")
                        .WithMany()
                        .HasForeignKey("CurrentFlashCardId");

                    b.HasOne("StickedWords.Domain.Models.LearningSession", "LearningSession")
                        .WithMany("Stages")
                        .HasForeignKey("LearningSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentFlashCard");

                    b.Navigation("LearningSession");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.LearningSession", b =>
                {
                    b.Navigation("FlashCards");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("StickedWords.Domain.Models.SessionStage", b =>
                {
                    b.Navigation("Guesses");
                });
#pragma warning restore 612, 618
        }
    }
}
